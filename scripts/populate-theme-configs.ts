import { createClient } from "@supabase/supabase-js";
import * as dotenv from "dotenv";
import { padraoConfig } from "../app/(sitetemas)/sitetemas/[lojaSlug]/themes/padrao/config";

dotenv.config({ path: ".env.local" });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY! // üîë precisa ser service role
);

async function populateThemeConfigs() {
  console.log("üöÄ Populando tabela 'theme_configs'...");

  // 1Ô∏è‚É£ Inserir/atualizar config padr√£o na tabela theme_configs
  const { error: insertError } = await supabase
    .from("theme_configs")
    .upsert(
      {
        nome_tema: padraoConfig.themeName,
        config_json: padraoConfig,
        is_default: true,
      },
      { onConflict: "nome_tema" }
    );

  if (insertError) {
    console.error("‚ùå Erro ao inserir Tema Padr√£o:", insertError.message);
    process.exit(1);
  }

  console.log("‚úÖ Tema Padr√£o configurado como default em 'theme_configs'.");

  // 2Ô∏è‚É£ Buscar lojas
  const { data: lojas, error: lojasError } = await supabase
    .from("lojas")
    .select("id, theme_config");

  if (lojasError) {
    console.error("‚ùå Erro ao buscar lojas:", lojasError.message);
    return;
  }

  // 3Ô∏è‚É£ Atualizar apenas lojas que ainda n√£o possuem config
  for (const loja of lojas ?? []) {
    if (!loja.theme_config) {
      const { error: updateError } = await supabase
        .from("lojas")
        .update({ theme_config: padraoConfig }) // üî• injeta JSON direto
        .eq("id", loja.id);

      if (updateError) {
        console.error(`‚ùå Erro ao atualizar loja ${loja.id}:`, updateError.message);
      } else {
        console.log(`‚úÖ Loja ${loja.id} atualizada com Tema Padr√£o.`);
      }
    }
  }

  console.log("üéâ Popula√ß√£o conclu√≠da.");
}

populateThemeConfigs();
